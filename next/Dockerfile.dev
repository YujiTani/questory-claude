# ビルドサイズ最適化するため、マルチステージでビルドする

# ベースイメージとして、Node.js 18のAlpineバージョンを使用
# ビルドステージ
FROM node:18-alpine AS base

# アプリケーションのディレクトリを設定
WORKDIR /usr/app

# package.jsonとpackage-lock.jsonをコピー
COPY package*.json ./

# メモリ消費を緩和するため分割して、インストール
RUN npm install react react-dom next
RUN npm install --save-dev typescript @types/node @types/react @types/react-dom
RUN npm install --save-dev postcss tailwindcss
RUN npm install --save-dev eslint eslint-config-next

COPY . .

CMD ["npm", "run", "build"]


# ====================

# 実行用のステージ
FROM node:18-alpine
WORKDIR /usr/app

# ビルドしたアプリケーションをコピー
COPY --from=base /usr/app .

CMD ["npm", "run", "dev", "-p", "3010"]
